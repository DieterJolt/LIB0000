using System.Runtime.InteropServices;
using HalconDotNet;

namespace LIB0000
{
    public partial class HalconService : ObservableObject
    {

        #region Commands

        [RelayCommand]

        private void cmdTeach()
        {
            GrabFromUSB3();
            //TeachShape();
        }

        #endregion

        #region Constructor

        public HalconService()
        {
            Grab = new Grab();
            ShapeSearch = new ShapeSearch();


            Task.Run(() => Cyclic());


        }

        #endregion

        #region Events
        #endregion

        #region Fields
        private HFramegrabber framegrabber;
        #endregion

        #region Methods

        public void Cyclic()
        {
            while (!ClosingApplication)
            {

                if (Type == 0)
                {
                    if (TestCounter > 100)
                    { TestCounter = 0; }
                    GrabFromUSB3();
                }
                else
                {
                    if (TestCounter > 500)
                    { TestCounter = 0; }


                }
                TestCounter++;
                Thread.Sleep(100);
            }

            // GrabFromWebcam();
            // DetectShape();
        }
        public void DetectShape()
        {
            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_Image, ho_ModelRegion, ho_TemplateImage;
            HObject ho_ModelContours, ho_TransContours, ho_MatchContour = null;

            // Local control variables 

            HTuple hv_ModelID = new HTuple(), hv_ModelRegionArea = new HTuple();
            HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
            HTuple hv_HomMat2D = new HTuple(), hv_MatchResultID = new HTuple();
            HTuple hv_NumMatchResult = new HTuple(), hv_I = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Angle = new HTuple(), hv_ScaleRow = new HTuple();
            HTuple hv_ScaleColumn = new HTuple(), hv_Score = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_ModelRegion);
            HOperatorSet.GenEmptyObj(out ho_TemplateImage);
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_TransContours);
            HOperatorSet.GenEmptyObj(out ho_MatchContour);
            //Image Acquisition 01: Code generated by Image Acquisition 01
            ho_Image.Dispose();
            //
            if (Type == 0)
            {
                HOperatorSet.ReadImage(out ho_Image, "C:/JOLT/FHV7.jpg");
            }
            else
            {
                HOperatorSet.ReadImage(out ho_Image, "C:/Users/joltm/OneDrive/Afbeeldingen/1_TEACH 001.jpg");
            }

            //
            //Matching 01: ************************************************
            //Matching 01: BEGIN of generated code for model initialization
            //Matching 01: ************************************************
            //
            //Matching 01: Obtain the model image
            //Matching 01: The image is assumed to be made available in the
            //Matching 01: variable last displayed in the graphics window
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.CopyObj(ho_Image, out ExpTmpOutVar_0, 1, 1);
                ho_Image.Dispose();
                ho_Image = ExpTmpOutVar_0;
            }
            //
            //Matching 01: Build the ROI from basic regions
            ho_ModelRegion.Dispose();
            HOperatorSet.GenRectangle1(out ho_ModelRegion, 20, 20, 200, 200);
            //
            //Matching 01: Reduce the model template
            ho_TemplateImage.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_ModelRegion, out ho_TemplateImage);
            //
            //Matching 01: Create and train the shape model
            hv_ModelID.Dispose();
            HOperatorSet.CreateGenericShapeModel(out hv_ModelID);
            //Matching 01: set the model parameters
            HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "metric", "use_polarity");
            HOperatorSet.TrainGenericShapeModel(ho_TemplateImage, hv_ModelID);
            //
            //Matching 01: Get the model contour for transforming it later into the image
            ho_ModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
            //
            //Matching 01: Support for displaying the model
            //Matching 01: Get the reference position
            hv_ModelRegionArea.Dispose(); hv_RefRow.Dispose(); hv_RefColumn.Dispose();
            HOperatorSet.AreaCenter(ho_ModelRegion, out hv_ModelRegionArea, out hv_RefRow,
                out hv_RefColumn);
            hv_HomMat2D.Dispose();
            HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RefRow, hv_RefColumn, 0, out hv_HomMat2D);
            ho_TransContours.Dispose();
            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, hv_HomMat2D);
            //
            //Matching 01: Display the model contours
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());

            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_ModelRegion, HDevWindowStack.GetActive());
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_TransContours, HDevWindowStack.GetActive());
            }
            // stop(...); only in hdevelop
            //
            //Matching 01: END of generated code for model initialization
            //Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *
            //Matching 01: BEGIN of generated code for model application
            //Matching 01: Set the search paramaters
            HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "border_shape_models", "false");
            //Matching 01: The following operations are usually moved into
            //Matching 01: that loop where the acquired images are processed
            //
            //Matching 01: Find the model
            hv_MatchResultID.Dispose(); hv_NumMatchResult.Dispose();
            HOperatorSet.FindGenericShapeModel(ho_Image, hv_ModelID, out hv_MatchResultID,
                out hv_NumMatchResult);
            //
            //Matching 01: Retrieve results
            HTuple end_val53 = hv_NumMatchResult - 1;
            HTuple step_val53 = 1;
            for (hv_I = 0; hv_I.Continue(end_val53, step_val53); hv_I = hv_I.TupleAdd(step_val53))
            {
                //
                //Matching 01: Display the detected match
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
                }
                ho_MatchContour.Dispose();
                HOperatorSet.GetGenericShapeModelResultObject(out ho_MatchContour, hv_MatchResultID,
                    hv_I, "contours");
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
                }
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.DispObj(ho_MatchContour, HDevWindowStack.GetActive());
                }
                ShapeSearch.ResultImage = ho_Image;
                ShapeSearch.ResultRegion = ho_MatchContour;
                //ResultTransform = ho_TransContours;
                //
                //Matching 01: Retrieve parameters of the detected match
                hv_Row.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "row", out hv_Row);
                hv_Column.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "column", out hv_Column);
                hv_Angle.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "angle", out hv_Angle);
                hv_ScaleRow.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "scale_row",
                    out hv_ScaleRow);
                hv_ScaleColumn.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "scale_column",
                    out hv_ScaleColumn);
                hv_HomMat2D.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "hom_mat_2d",
                    out hv_HomMat2D);
                hv_Score.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "score", out hv_Score);
                // stop(...); only in hdevelop
            }
            //
            //Matching 01: *******************************************
            //Matching 01: END of generated code for model application
            //Matching 01: *******************************************
            //
            ho_Image.Dispose();
            ho_ModelRegion.Dispose();
            ho_TemplateImage.Dispose();
            ho_ModelContours.Dispose();
            ho_TransContours.Dispose();
            ho_MatchContour.Dispose();

            hv_ModelID.Dispose();
            hv_ModelRegionArea.Dispose();
            hv_RefRow.Dispose();
            hv_RefColumn.Dispose();
            hv_HomMat2D.Dispose();
            hv_MatchResultID.Dispose();
            hv_NumMatchResult.Dispose();
            hv_I.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Angle.Dispose();
            hv_ScaleRow.Dispose();
            hv_ScaleColumn.Dispose();
            hv_Score.Dispose();
        }
        public void GrabFromUSB3()
        {
            if (framegrabber == null)
            {
                framegrabber = new HFramegrabber(
                "USB3Vision", 0, 0, 0, 0, 0, 0, "progressive",
                -1, "default", -1, "false", "default",
            "User Defined Name", 0, -1
            );
            }
            framegrabber.SetFramegrabberParam("ExposureMode", "Timed");
            framegrabber.SetFramegrabberParam("ExposureTime", 3000);


            HObject ho_Image = new HObject();
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GrabImage(out ho_Image, framegrabber);
            HOperatorSet.RotateImage(ho_Image, out ho_Image, 180, "constant");

            Grab.Image = ho_Image;

        }
        public void GrabFromGigE()
        {
            if (framegrabber == null)
            {
                framegrabber = new HFramegrabber(
                "GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", -1, "default", -1, "false", "default", "d47c443154af_OMRONSENTECH_STCMBS122BPOE", 0, -1
            );
            }
            framegrabber.SetFramegrabberParam("ExposureMode", "Timed");
            framegrabber.SetFramegrabberParam("ExposureTime", 3000);


            HObject ho_Image = new HObject();
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GrabImage(out ho_Image, framegrabber);
            HOperatorSet.RotateImage(ho_Image, out ho_Image, 180, "constant");

            Grab.Image = ho_Image;
        }




        public void GrabFromFile()
        {
            HObject ho_Image = new HObject();
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.ReadImage(out ho_Image, "C:/JOLT/FHV7.jpg");
            Grab.Image = ho_Image;
        }
        public void TeachShape()
        {
            //GrabFromFile();

            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_Image, ho_ModelRegion, ho_TemplateImage;
            HObject ho_ModelContours, ho_TransContours, ho_MatchContour = null;

            // Local control variables 

            HTuple hv_ModelID = new HTuple(), hv_ModelRegionArea = new HTuple();
            HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
            HTuple hv_HomMat2D = new HTuple(), hv_MatchResultID = new HTuple();
            HTuple hv_NumMatchResult = new HTuple(), hv_I = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Angle = new HTuple(), hv_ScaleRow = new HTuple();
            HTuple hv_ScaleColumn = new HTuple(), hv_Score = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_ModelRegion);
            HOperatorSet.GenEmptyObj(out ho_TemplateImage);
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_TransContours);
            HOperatorSet.GenEmptyObj(out ho_MatchContour);
            //Image Acquisition 01: Code generated by Image Acquisition 01
            ho_Image.Dispose();
            if (Type == 0)
            {
                ho_Image = Grab.Image;
                //HOperatorSet.ReadImage(out ho_Image, "C:/JOLT/FHV7.jpg");
            }
            else
            {
                HOperatorSet.ReadImage(out ho_Image, "C:/Users/joltm/OneDrive/Afbeeldingen/1_TEACH 001.jpg");
            }
            //
            //Matching 01: ************************************************
            //Matching 01: BEGIN of generated code for model initialization
            //Matching 01: ************************************************
            //
            //Matching 01: Obtain the model image
            //Matching 01: The image is assumed to be made available in the
            //Matching 01: variable last displayed in the graphics window
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.CopyObj(ho_Image, out ExpTmpOutVar_0, 1, 1);
                ho_Image.Dispose();
                ho_Image = ExpTmpOutVar_0;
            }
            //
            //Matching 01: Build the ROI from basic regions
            ho_ModelRegion.Dispose();
            HOperatorSet.GenRectangle1(out ho_ModelRegion, 20, 20, 200, 200);
            //
            //Matching 01: Reduce the model template
            ho_TemplateImage.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_ModelRegion, out ho_TemplateImage);
            //
            //Matching 01: Create and train the shape model
            hv_ModelID.Dispose();
            HOperatorSet.CreateGenericShapeModel(out hv_ModelID);
            //Matching 01: set the model parameters
            HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "metric", "use_polarity");
            HOperatorSet.TrainGenericShapeModel(ho_TemplateImage, hv_ModelID);
            //
            //Matching 01: Get the model contour for transforming it later into the image
            ho_ModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
            //
            //Matching 01: Support for displaying the model
            //Matching 01: Get the reference position
            hv_ModelRegionArea.Dispose(); hv_RefRow.Dispose(); hv_RefColumn.Dispose();
            HOperatorSet.AreaCenter(ho_ModelRegion, out hv_ModelRegionArea, out hv_RefRow,
                out hv_RefColumn);
            hv_HomMat2D.Dispose();
            HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RefRow, hv_RefColumn, 0, out hv_HomMat2D);
            ho_TransContours.Dispose();
            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, hv_HomMat2D);
            //
            //Matching 01: Display the model contours
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());

            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_ModelRegion, HDevWindowStack.GetActive());
            }
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.DispObj(ho_TransContours, HDevWindowStack.GetActive());
            }
            // stop(...); only in hdevelop
            //
            //Matching 01: END of generated code for model initialization
            //Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *
            //Matching 01: BEGIN of generated code for model application
            //Matching 01: Set the search paramaters
            HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "border_shape_models", "false");
            //Matching 01: The following operations are usually moved into
            //Matching 01: that loop where the acquired images are processed
            //
            //Matching 01: Find the model
            hv_MatchResultID.Dispose(); hv_NumMatchResult.Dispose();
            HOperatorSet.FindGenericShapeModel(ho_Image, hv_ModelID, out hv_MatchResultID,
                out hv_NumMatchResult);
            //
            //Matching 01: Retrieve results
            HTuple end_val53 = hv_NumMatchResult - 1;
            HTuple step_val53 = 1;
            for (hv_I = 0; hv_I.Continue(end_val53, step_val53); hv_I = hv_I.TupleAdd(step_val53))
            {
                //
                //Matching 01: Display the detected match
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
                }
                ho_MatchContour.Dispose();
                HOperatorSet.GetGenericShapeModelResultObject(out ho_MatchContour, hv_MatchResultID,
                    hv_I, "contours");
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
                }
                if (HDevWindowStack.IsOpen())
                {
                    HOperatorSet.DispObj(ho_MatchContour, HDevWindowStack.GetActive());
                }
                ShapeSearch.ResultImage = ho_Image;
                ShapeSearch.ResultRegion = ho_MatchContour;
                //ResultTransform = ho_TransContours;
                //
                //Matching 01: Retrieve parameters of the detected match
                hv_Row.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "row", out hv_Row);
                hv_Column.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "column", out hv_Column);
                hv_Angle.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "angle", out hv_Angle);
                hv_ScaleRow.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "scale_row",
                    out hv_ScaleRow);
                hv_ScaleColumn.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "scale_column",
                    out hv_ScaleColumn);
                hv_HomMat2D.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "hom_mat_2d",
                    out hv_HomMat2D);
                hv_Score.Dispose();
                HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, hv_I, "score", out hv_Score);
                // stop(...); only in hdevelop
            }
            //
            //Matching 01: *******************************************
            //Matching 01: END of generated code for model application
            //Matching 01: *******************************************
            //
            ho_Image.Dispose();
            ho_ModelRegion.Dispose();
            ho_TemplateImage.Dispose();
            ho_ModelContours.Dispose();
            ho_TransContours.Dispose();
            ho_MatchContour.Dispose();

            hv_ModelID.Dispose();
            hv_ModelRegionArea.Dispose();
            hv_RefRow.Dispose();
            hv_RefColumn.Dispose();
            hv_HomMat2D.Dispose();
            hv_MatchResultID.Dispose();
            hv_NumMatchResult.Dispose();
            hv_I.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Angle.Dispose();
            hv_ScaleRow.Dispose();
            hv_ScaleColumn.Dispose();
            hv_Score.Dispose();
        }

        #endregion

        #region Properties

        [ObservableProperty]
        private bool _closingApplication;

        [ObservableProperty]
        ShapeSearch _shapeSearch;

        [ObservableProperty]
        Grab _grab = new Grab();

        [ObservableProperty]
        int _type;

        [ObservableProperty]
        int _testCounter;

        [ObservableProperty]
        int _hardwareId;

        [ObservableProperty]
        string _ipAddress;


        #endregion
    }
    public partial class Grab : ObservableObject
    {

        #region Commands
        #endregion

        #region Constructor
        #endregion

        #region Events
        #endregion

        #region Fields



        #endregion

        #region Methods
        #endregion

        #region Properties

        [ObservableProperty]
        HObject _image = new HObject();

        [ObservableProperty]
        int _testCounter;
        #endregion


    }
    public partial class ShapeSearch : ObservableObject
    {

        #region Commands



        #endregion

        #region Constructor

        public ShapeSearch()
        {

        }

        #endregion

        #region Events
        #endregion

        #region Fields



        #endregion

        #region Methods


        #endregion

        #region Properties

        [ObservableProperty]
        HObject _resultImage = new HObject();

        [ObservableProperty]
        HObject _resultRegion = new HObject();

        [ObservableProperty]
        HObject _resultTransform = new HObject();

        #endregion



    }
}
